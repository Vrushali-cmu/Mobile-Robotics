classdef robotTrajectory < handle
   properties
      distance
      velocity
      poses
      time
      omega
      Ks = 0.5;
      Kv = 0.5;
      t_pause = 0.5;
      num_samples = 1000;
   end
   methods
        function obj = robotTrajectory()
            %robot_obj = robotModel();
            velocity_obj = figure8ReferenceControl(obj.Ks,obj.Kv,obj.t_pause);
            tf = velocity_obj.getTrajectoryDuration();
            obj.distance = zeros(obj.num_samples,1);
            obj.velocity = zeros(obj.num_samples,1);
            obj.omega = zeros(obj.num_samples,1);
            obj.poses = zeros(obj.num_samples,3);
            dt = tf/obj.num_samples;
            obj.time = (1:obj.num_samples)*dt;
            for i=2:obj.num_samples
                velocity_obj.computeControl(dt*(i-1));
                obj.velocity(i) = velocity_obj.v;
                obj.omega(i) = velocity_obj.w;
                obj.distance(i) = obj.distance(i-1) + obj.velocity(i-1)*dt;
                temp_theta = obj.poses(i-1,3)+obj.omega(i-1)*dt/2;
                obj.poses(i,1) = obj.poses(i-1,1)+obj.velocity(i-1)*cos(temp_theta)*dt;
                obj.poses(i,2) = obj.poses(i-1,2)+obj.velocity(i-1)*sin(temp_theta)*dt;
                obj.poses(i,3) = temp_theta+obj.omega(i-1)*dt/2;
            end
        end 
        
       function vel_t = getVelocityAtTime(obj, t)
           vel_t = interp1(obj.time, obj.velocity, t); 
       end
       
       function dist_t = getVelocityAttime(obj, t)
           dist_t = interp1(obj.time, obj.distance, t); 
       end
       
       function pose_t = getPosesAttime(obj,t)
           pose_t = interp1(obj.time, obj.poses, t); 
       end
       
       function omega_t = getOmegaAttime(obj, t)
           omega_t = interp1(obj.time, obj.omega, t); 
       end
       
       function omega_dist = getOmegaAtDistance(obj,dist,amax,vmax,tPause,tf)
           
           tramp = vmax/amax;
           t0 = tf-2*tPause-2*tramp;
           if dist<0.5
               t = sqrt(2*dist/amax)+tPause;
           elseif dist<(0.5*amax*tramp^2+vmax*t0)
               t = (dist-0.5*amax*tramp^2)/(vmax)+tPause;
           else
               A = -0.5*amax;
               B = amax*tramp;
               C = 0.5*amax*tramp^2 + vmax*-dist;
               t = (-B+sqrt(B^2-4*A*C))/(2*A);
               t = tf-tPause-tramp+t;
           end
           omega_dist = obj.getOmegaAttime(t);
       end
       
       
       
end   
end